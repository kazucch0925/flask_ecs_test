version: 0.2

env:
  variables:
    S3_BUCKET: "codepipeline-ap-northeast-1-940418762680"
    S3_PREFIX: "flask_ecs_test/BuildArtif"
  secrets-manager:
    DOCKERHUB_USER: arn:aws:secretsmanager:$AWS_DEFAULT_REGION:$AWS_ACCOUNT_ID:secret:flask_ecs_test:username
    DOCKERHUB_PASS: arn:aws:secretsmanager:$AWS_DEFAULT_REGION:$AWS_ACCOUNT_ID:secret:flask_ecs_test:password

phases:
  install:
    runtime-versions:
      python: 3.10
      java: corretto11 # Javaをインストール
    commands:
      - echo "Installing system dependencies" # システムの依存関係をインストールすることを示すメッセージを表示
      - npm install -g @openapitools/openapi-generator-cli # OpenAPI Generator CLIをグローバルにインストール
      - pip install --user pytest pytest-html # pytestとpytest-htmlをユーザーのホームディレクトリにインストール
      - export PATH=$PATH:$(npm bin -g) # グローバルにインストールされたnpmパッケージの実行パスをPATHに追加
  
  pre_build:
    commands:
      - echo "Setting up openapi-generator-cli in PATH" # OpenAPI Generator CLIのパス設定を示すメッセージを表示
      - export PATH=$PATH:$(npm bin -g) # グローバルにインストールされたnpmパッケージの実行パスを再度PATHに追加
      - echo Logging in to Amazon ECR... # Amazon ECRへのログインを示すメッセージを表示
      - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com # Amazon ECRにログイン
      - echo Logging in to Docker Hub... # Docker Hubへのログインを示すメッセージを表示
      - echo $DOCKERHUB_PASS | docker login -u $DOCKERHUB_USER --password-stdin # Docker Hubにログイン
      - IMAGE_TAG=$CODEBUILD_RESOLVED_SOURCE_VERSION # コードのバージョンをIMAGE_TAGに設定
      - openapi-generator-cli version # OpenAPI Generator CLIのバージョンを確認
  
  build:
    commands:
      - echo Build started on `date` # ビルドの開始を示すメッセージを表示
      - echo Generating code from OpenAPI spec # OpenAPIスキーマからコードを生成することを示すメッセージを表示
      - openapi-generator-cli generate -i openapi.yaml -g python -o ./generated # OpenAPIスキーマからPythonコードを生成
      - echo Installing project dependencies # プロジェクトの依存関係をインストールすることを示すメッセージを表示
      - pip install -r ./generated/requirements.txt # 生成されたコードの依存関係をインストール
      - pip install -r ./generated/test-requirements.txt # テストに必要な依存関係をインストール
      - echo Running tests # テストの実行を示すメッセージを表示
      - pytest ./generated --html=report.html --self-contained-html # 生成されたコードのテストを実行し、HTML形式のレポートを生成
      - echo Building the Docker image... # Dockerイメージのビルドを示すメッセージを表示
      - docker build -t $IMAGE_REPO_NAME:$IMAGE_TAG . # Dockerイメージをビルド
      - docker tag $IMAGE_REPO_NAME:$IMAGE_TAG $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG # イメージにタグを付ける
  
  post_build:
    commands:
      - echo Build completed on `date` # ビルドの完了を示すメッセージを表示
      - echo Pushing the Docker image... # Dockerイメージのプッシュを示すメッセージを表示
      - docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG # Amazon ECRにDockerイメージをプッシュ
      - echo Uploading report.html to S3... # S3にreport.htmlをアップロードすることを示すメッセージを表示
      - aws s3 cp report.html s3://$S3_BUCKET/$S3_PREFIX/report.html --sse AES256 --acl public-read # S3にreport.htmlをアップロードし、公開読み取り権限を付与
      - printf '[{"name":"%s","imageUri":"%s"}]' $CONTAINER_NAME $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG  > imagedefinitions.json # イメージ定義をJSONファイルに出力

artifacts:
  files:
    - imagedefinitions.json # 出力されたイメージ定義JSONファイルをアーティファクトとして保存
    - 'report.html' # 生成されたテストレポートをアーティファクトとして保存
  base-directory: './generated' # 基本ディレクトリを指定
  discard-paths: yes # パスを破棄してルートに保存
